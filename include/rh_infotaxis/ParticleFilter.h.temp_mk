#ifndef PARTICLE_FILTER_H_
#define PARTICLE_FILTER_H_

//some generically useful stuff to include...
#include <vector>
#include <cmath>
#include <random>
#include <iostream>
#include <algorithm>

#include "rh_infotaxis/EnvClass.h"
#include "rh_infotaxis/UavClass.h"

using std::vector;

class ParticleFilter
{
public:
    void initialization(int num_particles, EnvClass env); // initialization

    void weight_update(UavClass uav, EnvClass env);

    int n_p;
    vector<double> X;
    vector<double> Y;
    vector<double> Z;

    vector<double> Q;
    vector<double> Phi;
    vector<double> D;
    vector<double> Tau;

    vector<double> Wpnorm;

private:
    vector<double> isotropic_plume(UavClass uav, vector<double> pf_samples);
    void prior(EnvClass env);
    void resampling(UavClass uav, EnvClass env);

    std::vector<double> ga_new;


    //void sensor_model();
    //void dispersion_model();
    //void resampling();
};

#endif
